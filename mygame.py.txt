
import time
import termcolor
import random
import json
import os
import threading
import sys
from datetime import datetime


try:
    import pygame
    pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=512)
    SOUND_ENABLED = True
except ImportError:
    SOUND_ENABLED = False
    print("Sound effects disabled - pygame not available")

class NumberGuessingGame:
    def __init__(self):
        self.stats_file = "game_stats.json"
        self.achievements_file = "achievements.json"
        self.load_stats()
        self.load_achievements()
        self.sound_enabled = SOUND_ENABLED
        if self.sound_enabled:
            self.init_sounds()
        self.power_ups = ['skip_turn', 'extra_hint', 'double_score', 'freeze_time']
    
    def init_sounds(self):
        """Initialize sound effects using generated tones"""
        self.sounds = {}
        try:
            # Generate victory sound (ascending notes)
            self.sounds['victory'] = self.generate_tone_sequence([523, 659, 784, 1047], 0.3)
            
            # Generate wrong guess sound (descending notes)
            self.sounds['wrong'] = self.generate_tone_sequence([400, 350, 300], 0.2)
            
            # Generate hint sound (gentle beep)
            self.sounds['hint'] = self.generate_tone(800, 0.1)
            
            # Generate time warning sound (urgent beep)
            self.sounds['time_warning'] = self.generate_tone_sequence([1000, 800, 1000], 0.15)
            
            # Generate elimination sound (dramatic descending)
            self.sounds['elimination'] = self.generate_tone_sequence([600, 500, 400, 300, 200], 0.2)
            
            # Generate game start sound (welcoming chime)
            self.sounds['game_start'] = self.generate_tone_sequence([400, 500, 600, 700, 800], 0.2)
            
        except Exception:
            self.sound_enabled = False
    
    def generate_tone(self, frequency, duration):
        """Generate a simple tone"""
        if not self.sound_enabled:
            return None
        
        try:
            import numpy as np
            sample_rate = 22050
            frames = int(duration * sample_rate)
            
            # Generate sine wave using numpy
            t = np.linspace(0, duration, frames)
            wave = np.sin(frequency * 2 * np.pi * t)
            
            # Convert to 16-bit integers and stereo
            sound_array = (wave * 32767).astype(np.int16)
            sound_array = np.array([sound_array, sound_array]).T
            
            sound = pygame.sndarray.make_sound(sound_array)
            return sound
        except Exception:
            return None
    
    def generate_tone_sequence(self, frequencies, duration_per_tone):
        """Generate a sequence of tones"""
        if not self.sound_enabled:
            return None
        
        try:
            sounds = []
            for freq in frequencies:
                tone = self.generate_tone(freq, duration_per_tone)
                if tone:
                    sounds.append(tone)
            return sounds
        except Exception:
            return None
    
    def play_sound(self, sound_name):
        """Play a sound effect"""
        if not self.sound_enabled or sound_name not in self.sounds:
            return
        
        try:
            sound = self.sounds[sound_name]
            if isinstance(sound, list):
                # Play sequence of sounds
                def play_sequence():
                    for s in sound:
                        s.play()
                        time.sleep(0.1)
                threading.Thread(target=play_sequence, daemon=True).start()
            else:
                # Play single sound
                sound.play()
        except Exception:
            pass
        
    def load_stats(self):
        """Load game statistics from file"""
        try:
            with open(self.stats_file, 'r') as f:
                self.stats = json.load(f)
        except FileNotFoundError:
            self.stats = {}
    
    def save_stats(self):
        """Save game statistics to file"""
        with open(self.stats_file, 'w') as f:
            json.dump(self.stats, f, indent=2)
    
    def load_achievements(self):
        """Load achievements from file"""
        try:
            with open(self.achievements_file, 'r') as f:
                self.achievements = json.load(f)
        except FileNotFoundError:
            self.achievements = {}
    
    def save_achievements(self):
        """Save achievements to file"""
        with open(self.achievements_file, 'w') as f:
            json.dump(self.achievements, f, indent=2)
    
    def check_achievements(self, player_name, attempts, score, time_taken):
        """Check and award achievements"""
        if player_name not in self.achievements:
            self.achievements[player_name] = []
        
        player_achievements = self.achievements[player_name]
        new_achievements = []
        
        # Define achievements
        achievement_list = [
            ("🎯 First Blood", "Win your first game", lambda: self.stats[player_name]['games_won'] == 1),
            ("🔥 Speed Demon", "Win in under 10 seconds", lambda: time_taken < 10),
            ("🧠 Mind Reader", "Guess correctly in 1 attempt", lambda: attempts == 1),
            ("💯 Perfectionist", "Score over 150 points", lambda: score > 150),
            ("🏆 Champion", "Win 10 games", lambda: self.stats[player_name]['games_won'] >= 10),
            ("⚡ Lightning Fast", "Win in under 5 attempts", lambda: attempts <= 5),
            ("🎪 Show Off", "Score over 200 points", lambda: score > 200),
        ]
        
        for name, desc, condition in achievement_list:
            if name not in player_achievements:
                try:
                    if condition():
                        player_achievements.append(name)
                        new_achievements.append((name, desc))
                        print(termcolor.colored(f"🏅 ACHIEVEMENT UNLOCKED: {name}", "yellow", attrs=["bold"]))
                        print(termcolor.colored(f"   {desc}", "yellow"))
                except:
                    pass
        
        return new_achievements
    
    def update_player_stats(self, player_name, attempts, won, score):
        """Update statistics for a player"""
        if player_name not in self.stats:
            self.stats[player_name] = {
                'games_played': 0,
                'games_won': 0,
                'total_attempts': 0,
                'best_score': 0,
                'total_score': 0
            }
        
        stats = self.stats[player_name]
        stats['games_played'] += 1
        stats['total_attempts'] += attempts
        stats['total_score'] += score
        
        if won:
            stats['games_won'] += 1
            if score > stats['best_score']:
                stats['best_score'] = score
    
    def show_stats(self, player_name):
        """Display player statistics"""
        if player_name in self.stats:
            stats = self.stats[player_name]
            avg_attempts = stats['total_attempts'] / stats['games_played']
            win_rate = (stats['games_won'] / stats['games_played']) * 100
            avg_score = stats['total_score'] / stats['games_played']
            
            print(termcolor.colored(f"\n📊 {player_name}'s Statistics:", "cyan", attrs=["bold"]))
            print(termcolor.colored(f"Games Played: {stats['games_played']}", "white"))
            print(termcolor.colored(f"Games Won: {stats['games_won']}", "green"))
            print(termcolor.colored(f"Win Rate: {win_rate:.1f}%", "yellow"))
            print(termcolor.colored(f"Best Score: {stats['best_score']}", "magenta"))
            print(termcolor.colored(f"Average Score: {avg_score:.1f}", "blue"))
            print(termcolor.colored(f"Average Attempts: {avg_attempts:.1f}", "white"))
    
    def show_achievements(self, player_name):
        """Display player achievements"""
        if player_name in self.achievements and self.achievements[player_name]:
            print(termcolor.colored(f"\n🏅 {player_name}'s Achievements:", "yellow", attrs=["bold"]))
            for achievement in self.achievements[player_name]:
                print(termcolor.colored(f"  {achievement}", "yellow"))
        else:
            print(termcolor.colored(f"\n🏅 {player_name} has no achievements yet!", "yellow"))
    
    def show_hall_of_fame(self):
        """Display top players"""
        if not self.stats:
            print(termcolor.colored("No statistics available yet!", "red"))
            return
        
        sorted_players = sorted(
            self.stats.items(), 
            key=lambda x: x[1]['best_score'], 
            reverse=True
        )[:5]
        
        print(termcolor.colored("\n🏆 HALL OF FAME 🏆", "yellow", attrs=["bold"]))
        print(termcolor.colored("=" * 30, "yellow"))
        
        for i, (name, stats) in enumerate(sorted_players, 1):
            medal = "🥇" if i == 1 else "🥈" if i == 2 else "🥉" if i == 3 else f"{i}."
            achievement_count = len(self.achievements.get(name, []))
            achievement_text = f" | {achievement_count} 🏅" if achievement_count > 0 else ""
            print(termcolor.colored(f"{medal} {name}: {stats['best_score']} points{achievement_text}", "yellow"))
    
    def get_difficulty(self):
        """Get difficulty level from user"""
        difficulties = {
            '1': {'name': 'Easy', 'max': 50, 'bonus': 1.0},
            '2': {'name': 'Medium', 'max': 100, 'bonus': 1.5},
            '3': {'name': 'Hard', 'max': 500, 'bonus': 2.0},
            '4': {'name': 'Expert', 'max': 1000, 'bonus': 3.0},
            '5': {'name': 'Custom', 'max': None, 'bonus': 1.0}
        }
        
        print(termcolor.colored("\n🎯 Choose Difficulty Level:", "magenta", attrs=["bold"]))
        for key, diff in difficulties.items():
            if diff['name'] != 'Custom':
                print(termcolor.colored(f"{key}. {diff['name']} (1-{diff['max']}) - {diff['bonus']}x score bonus", "cyan"))
            else:
                print(termcolor.colored(f"{key}. {diff['name']} (Choose your own range)", "cyan"))
        
        while True:
            choice = input(termcolor.colored("Enter choice (1-5): ", "magenta"))
            if choice in difficulties:
                if choice == '5':
                    while True:
                        try:
                            max_num = int(input(termcolor.colored("Enter maximum number: ", "magenta")))
                            if max_num > 0:
                                return max_num, 1.0
                            else:
                                print(termcolor.colored("Invalid", "red"))
                        except ValueError:
                            print(termcolor.colored("Invalid", "red"))
                else:
                    diff = difficulties[choice]
                    return diff['max'], diff['bonus']
            else:
                print(termcolor.colored("Invalid", "red"))
    
    def get_game_mode(self):
        """Get game mode from user"""
        modes = {
            '1': 'Classic',
            '2': 'Best of 3 Rounds',
            '3': 'Time Challenge'
        }
        
        print(termcolor.colored("\n🎮 Choose Game Mode:", "magenta", attrs=["bold"]))
        for key, mode in modes.items():
            print(termcolor.colored(f"{key}. {mode}", "cyan"))
        
        while True:
            choice = input(termcolor.colored("Enter choice (1-3): ", "magenta"))
            if choice in modes:
                return choice
            else:
                print(termcolor.colored("Invalid", "red"))
    
    def get_hint(self, secret_number, max_number, attempts):
        """Generate hints based on attempts"""
        hints = []
        
        if attempts >= 3:
            hints.append(f"The number is {'even' if secret_number % 2 == 0 else 'odd'}")
        
        if attempts >= 5:
            if secret_number <= max_number // 4:
                hints.append("The number is in the first quarter of the range")
            elif secret_number <= max_number // 2:
                hints.append("The number is in the second quarter of the range")
            elif secret_number <= (3 * max_number) // 4:
                hints.append("The number is in the third quarter of the range")
            else:
                hints.append("The number is in the fourth quarter of the range")
        
        if attempts >= 7:
            for divisor in [3, 5, 7]:
                if secret_number % divisor == 0:
                    hints.append(f"The number is divisible by {divisor}")
                    break
        
        return hints
    
    def play_single_round(self, player_name, max_number, difficulty_bonus, round_num=1, sudden_death=False, time_limit=None):
        """Play a single round of the game"""
        secret_number = random.randint(1, max_number)
        print(termcolor.colored(f"\n🎯 Round {round_num} - {player_name}", color="cyan", attrs=["bold"]))
        
        if time_limit:
            print(termcolor.colored(f"⏰ Time limit: {time_limit} seconds", "yellow"))
        
        # Power-up system
        power_up_used = False
        double_score_active = False
        extra_hints_available = 1
        
        # Randomly offer power-up (20% chance)
        if random.random() < 0.2:
            power_up = random.choice(self.power_ups)
            print(termcolor.colored(f"💎 POWER-UP AVAILABLE: {power_up.replace('_', ' ').title()}!", "magenta", attrs=["bold"]))
            use_power = input(termcolor.colored("Use power-up? (y/n): ", "magenta")).lower() == 'y'
            if use_power:
                power_up_used = power_up
                if power_up == 'double_score':
                    double_score_active = True
                    print(termcolor.colored("⚡ Double score activated!", "yellow"))
                elif power_up == 'extra_hint':
                    extra_hints_available = 3
                    print(termcolor.colored("💡 Extra hints activated!", "yellow"))
                elif power_up == 'freeze_time':
                    time_limit = None if time_limit else None
                    print(termcolor.colored("❄️ Time frozen!", "yellow"))
        
        time.sleep(1)
        print(termcolor.colored(f"Guess a number between 1 and {max_number}: ", "blue"))
        
        attempts = 0
        start_time = time.time()
        used_hints = []
        closest_distance = max_number
        
        while True:
            if time_limit:
                elapsed = time.time() - start_time
                remaining = time_limit - elapsed
                if remaining <= 0:
                    print(termcolor.colored("⏰ Time's up!", "red", attrs=["bold"]))
                    self.play_sound('elimination')
                    print(termcolor.colored(f"The number was {secret_number}", "yellow"))
                    return 0, attempts, False
                
                # Play warning sound when time is running low
                if remaining <= 10 and attempts > 1:
                    self.play_sound('time_warning')
                
                print(termcolor.colored(f"⏰ {remaining:.1f}s remaining", "yellow"))
            
            guess_input = input()
            try:
                guess = int(guess_input)
                if guess < 1 or guess > max_number:
                    print(termcolor.colored("Invalid", "red"))
                    print(termcolor.colored(f"Guess a number between 1 and {max_number}: ", "blue"))
                    continue
            except ValueError:
                print(termcolor.colored("Invalid", "red"))
                print(termcolor.colored(f"Guess a number between 1 and {max_number}: ", "blue"))
                continue

            attempts += 1

            if guess == secret_number:
                elapsed_time = time.time() - start_time
                print(termcolor.colored("🎉 Correct! 🎉", "green", attrs=["bold"]))
                
                # Play victory sound
                self.play_sound('victory')
                
                print(termcolor.colored(f"Attempts: {termcolor.colored(attempts, 'cyan', attrs=['bold'])}", "magenta", attrs=["blink"]))
                
                # Calculate score with bonuses
                base_score = max(0, 100 - attempts)
                time_bonus = max(0, 50 - int(elapsed_time)) if elapsed_time < 50 else 0
                proximity_bonus = max(0, 20 - closest_distance) if closest_distance < 20 else 0
                difficulty_score = int(base_score * difficulty_bonus)
                power_up_bonus = 25 if power_up_used else 0
                
                total_score = difficulty_score + time_bonus + proximity_bonus + power_up_bonus
                
                if double_score_active:
                    total_score *= 2
                    print(termcolor.colored("⚡ DOUBLE SCORE ACTIVATED!", "magenta", attrs=["bold"]))
                
                print(termcolor.colored(f"⚡ Time: {elapsed_time:.1f}s", "blue"))
                print(termcolor.colored(f"💎 Base Score: {base_score}", "white"))
                print(termcolor.colored(f"🚀 Difficulty Bonus: {difficulty_score - base_score}", "yellow"))
                print(termcolor.colored(f"⏰ Time Bonus: {time_bonus}", "green"))
                print(termcolor.colored(f"🎯 Proximity Bonus: {proximity_bonus}", "cyan"))
                if power_up_bonus:
                    print(termcolor.colored(f"💎 Power-up Bonus: {power_up_bonus}", "magenta"))
                print(termcolor.colored(f"🏆 Total Score: {termcolor.colored(total_score, 'cyan', attrs=['bold'])}", "magenta", attrs=["blink"]))
                
                # Check achievements
                self.check_achievements(player_name, attempts, total_score, elapsed_time)
                
                return total_score, attempts, True
                
            elif sudden_death:
                print(termcolor.colored("💀 SUDDEN DEATH - Game Over!", "red", attrs=["bold"]))
                self.play_sound('elimination')
                print(termcolor.colored(f"The number was {secret_number}", "yellow"))
                return 0, attempts, False
                
            elif guess < secret_number:
                distance = secret_number - guess
                if distance <= 5:
                    print(termcolor.colored("📈 Very close! Guess higher", color="green", attrs=["bold"]))
                elif distance <= 15:
                    print(termcolor.colored("📈 Close! Guess higher", color="green"))
                else:
                    print(termcolor.colored("📈 Guess higher", color="green"))
                self.play_sound('wrong')
            else:
                distance = guess - secret_number
                if distance <= 5:
                    print(termcolor.colored("📉 Very close! Guess lower", color="yellow", attrs=["bold"]))
                elif distance <= 15:
                    print(termcolor.colored("📉 Close! Guess lower", color="yellow"))
                else:
                    print(termcolor.colored("📉 Guess lower", color="yellow"))
                self.play_sound('wrong')
            
            # Track closest guess for bonus points
            current_distance = abs(guess - secret_number)
            if current_distance < closest_distance:
                closest_distance = current_distance
                if current_distance <= 10:
                    print(termcolor.colored("🎯 Getting warmer!", "cyan"))
            
            # Show hints (more generous with power-up)
            hint_threshold = 2 if extra_hints_available > 1 else 3
            if attempts >= hint_threshold and extra_hints_available > 0:
                hints = self.get_hint(secret_number, max_number, attempts)
                new_hints = [h for h in hints if h not in used_hints]
                if new_hints:
                    hint = new_hints[0]
                    used_hints.append(hint)
                    extra_hints_available -= 1
                    print(termcolor.colored(f"💡 Hint: {hint}", "blue", attrs=["bold"]))
                    if extra_hints_available > 0:
                        print(termcolor.colored(f"   ({extra_hints_available} hints remaining)", "blue"))
                    self.play_sound('hint')
    
    def play_game(self):
        """Main game loop"""
        print(termcolor.colored("""
╔══════════════════════════════════════╗
║     🎯 NUMBER GUESSING GAME 2.0 🎯    ║
║        Enhanced Edition              ║
╚══════════════════════════════════════╝
        """, "magenta", attrs=["bold"]))
        
        # Play game start sound
        self.play_sound('game_start')
        
        # Get number of players
        while True:
            try:
                num_players = int(input(termcolor.colored("Enter the number of players: ", "magenta")))
                if num_players > 0:
                    break
                else:
                    print(termcolor.colored("Invalid", "red"))
            except ValueError:
                print(termcolor.colored("Invalid", "red"))
        
        # Get difficulty
        max_number, difficulty_bonus = self.get_difficulty()
        
        # Get game mode
        game_mode = self.get_game_mode()
        
        # Setup game parameters
        rounds = 3 if game_mode == '2' else 1
        sudden_death = False
        time_limit = 60 if game_mode == '3' else None
        
        # Get player names
        player_names = []
        for player_num in range(1, num_players + 1):
            while True:
                player_name = input(termcolor.colored(f"Enter the name of Player {player_num}: ", "cyan"))
                if player_name.strip():
                    player_names.append(player_name.strip())
                    break
                else:
                    print(termcolor.colored("Invalid", "red"))
        
        # Play the game
        all_scores = {name: [] for name in player_names}
        
        for round_num in range(1, rounds + 1):
            if rounds > 1:
                print(termcolor.colored(f"\n{'='*50}", "yellow"))
                print(termcolor.colored(f"🎮 ROUND {round_num} of {rounds} 🎮", "yellow", attrs=["bold"]))
                print(termcolor.colored(f"{'='*50}", "yellow"))
            
            for player_name in player_names:
                score, attempts, won = self.play_single_round(
                    player_name, max_number, difficulty_bonus, 
                    round_num, sudden_death, time_limit
                )
                all_scores[player_name].append(score)
                self.update_player_stats(player_name, attempts, won, score)
                
                if sudden_death and not won:
                    print(termcolor.colored(f"💀 {player_name} is eliminated!", "red", attrs=["bold"]))
                    player_names.remove(player_name)
                    if len(player_names) <= 1:
                        break
                
                print("\n")
            
            if sudden_death and len(player_names) <= 1:
                break
        
        # Calculate final scores
        final_scores = []
        for name in all_scores.keys():
            if name in player_names or not sudden_death:
                total_score = sum(all_scores[name])
                final_scores.append((name, total_score))
        
        # Display results
        self.display_final_results(final_scores, rounds)
        
        # Save statistics and achievements
        self.save_stats()
        self.save_achievements()
        
        # Ask to show individual stats
        print(termcolor.colored("\n📊 Would you like to see individual statistics?", "cyan"))
        if input(termcolor.colored("(y/n): ", "cyan")).lower() == 'y':
            for name, _ in final_scores:
                self.show_stats(name)
                self.show_achievements(name)
        
        # Show hall of fame
        print(termcolor.colored("\n🏆 Would you like to see the Hall of Fame?", "cyan"))
        if input(termcolor.colored("(y/n): ", "cyan")).lower() == 'y':
            self.show_hall_of_fame()
        
        # Ask to play again
        print(termcolor.colored("\n🎮 Would you like to play again?", "green", attrs=["bold"]))
        if input(termcolor.colored("(y/n): ", "green")).lower() == 'y':
            print("\n" + "="*60 + "\n")
            self.play_game()
        else:
            print(termcolor.colored("\n🎉 Thanks for playing! 🎉", "magenta", attrs=["bold"]))
    
    def display_final_results(self, final_scores, rounds):
        """Display final game results"""
        print(termcolor.colored("\n" + "="*60, "yellow"))
        print(termcolor.colored("🏆 FINAL RESULTS 🏆", "magenta", attrs=["bold"]))
        print(termcolor.colored("="*60, "yellow"))
        
        # Sort by total score
        sorted_scores = sorted(final_scores, key=lambda x: x[1], reverse=True)
        
        for i, (name, total_score) in enumerate(sorted_scores, 1):
            medal = "🥇" if i == 1 else "🥈" if i == 2 else "🥉" if i == 3 else f"{i}."
            avg_score = total_score / rounds if rounds > 1 else total_score
            
            print(termcolor.colored(
                f"{medal} {name}: {termcolor.colored(total_score, 'cyan', attrs=['bold'])} points" +
                (f" (avg: {avg_score:.1f})" if rounds > 1 else ""), 
                "magenta", attrs=["blink"]
            ))
        
        # Determine winner
        if len(sorted_scores) > 1:
            highest_score = sorted_scores[0][1]
            winners = [player for player in sorted_scores if player[1] == highest_score]
            
            if len(winners) > 1:
                winner_names = ", ".join([winner[0] for winner in winners])
                print(termcolor.colored(f"\n🤝 It's a draw between: {winner_names}!", "yellow", attrs=["bold"]))
            else:
                winner_name, winner_score = winners[0]
                if len(sorted_scores) > 1:
                    second_place_score = sorted_scores[1][1]
                    point_difference = winner_score - second_place_score
                    point_word = "point" if point_difference == 1 else "points"
                    print(termcolor.colored(f"\n🎊 {winner_name} wins by {point_difference} {point_word}! 🎊", "green", attrs=["bold"]))
                else:
                    print(termcolor.colored(f"\n🎊 {winner_name} is the winner! 🎊", "green", attrs=["bold"]))

# Main execution
if __name__ == "__main__":
    game = NumberGuessingGame()
    game.play_game()
